# -*- coding: utf-8 -*-
"""abbasi-ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wyF0k-0r4Nu9Y8APyrBdqpPpsdmzsOdr

load the dataset from drive
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/gdrive/')
# %cd '/content/gdrive/My Drive/dataset/archive.zip (Unzipped Files)'

"""import necessery libraries"""

from builtins import range
import tensorflow as tf
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Dropout, Conv2D
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model, load_model
import numpy as np
import matplotlib.pyplot as plt
from glob import glob
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Lambda, GlobalAveragePooling2D, Dropout, Dense
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint

"""dataset pat"""

train_dir = 'train'
valid_dir = 'valid'
test_dir = 'test'

"""generating and preparing the dataset for model"""

image_gen = ImageDataGenerator()
train_data_gen = ImageDataGenerator(horizontal_flip = True,
                                    rotation_range=20,
                                    width_shift_range=0.1,
                                    height_shift_range=0.1,
                                    zoom_range=0.2)
train_data = train_data_gen.flow_from_directory(
    train_dir,
    target_size = (224, 224),
    color_mode = 'rgb',
    batch_size = 32,
    class_mode ='categorical',
    shuffle = True
)
valid_data = image_gen.flow_from_directory(
    valid_dir,
    target_size = (224, 224),
    color_mode = 'rgb',
    batch_size = 32,
    class_mode ='categorical',
    shuffle = False
)
test_data = image_gen.flow_from_directory(
    test_dir,
    target_size = (224, 224),
    color_mode = 'rgb',
    batch_size = 32,
    class_mode ='categorical',
    shuffle = False
)

"""adding classes into a dictionary"""

labels = train_data.class_indices
class_mapping = dict((v,k) for k,v in labels.items())
class_mapping

"""our cnn model (resnet50)"""

resnetModel = tf.keras.applications.resnet50.ResNet50(weights="imagenet", include_top=False,
    input_tensor=Input(shape=(224, 224, 3)))

outputs = resnetModel.output
outputs = Flatten(name="flatten")(outputs)
outputs = Dropout(0.2)(outputs)
outputs = Dense(70, activation="softmax")(outputs)

model = Model(inputs=resnetModel.input, outputs=outputs)

"""COMPILING THE MODEL"""

opt = Adam(learning_rate=0.00001)
model.compile(optimizer = opt,
              loss = 'categorical_crossentropy',
              metrics = ['accuracy']
)

"""build and summarization"""

model.build(((None, 224, 224, 3)))
model.summary()

"""fit model on the train and validation dataset"""

train_cb = ModelCheckpoint('./model/', save_best_only = True)
history = model.fit(train_data, validation_data = valid_data, callbacks = [train_cb], epochs = 20, batch_size = 32)

"""prediction"""

batch_size = 32
y_pred = model.predict(test_data, batch_size=batch_size)

"""saving model"""

tf.keras.models.save_model(model, "abbasiai.h5")

"""plot the accuracy an val_accuracy against epochs"""

accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']

epoch_count = range(1, len(val_accuracy) + 1)

plt.plot(epoch_count, accuracy, 'b--')
plt.plot(epoch_count, val_accuracy, 'r--')
plt.xlabel('Epoch')
plt.ylabel('accuracy')
plt.show();